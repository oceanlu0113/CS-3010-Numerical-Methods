# -*- coding: utf-8 -*-
"""[CS3010] Project 3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W4izIJbjjEY05pQO29momhW_j-gCOCeo
"""

import numpy as np

# (A) Given the points (0,1), (1.9), (2,23), (4,93), (6,259)   
n = 5; 
y = [[0 for i in range(10)] 
		for j in range(10)];   
x = [0,1,2,4,6]; 
y[0][0] = 1; 
y[1][0] = 9; 
y[2][0] = 23; 
y[3][0] = 93;
y[4][0] = 259; 
xx = np.array([0,1,2,4,6]) 
yy = np.array([1,9,23,93,259]) 

# 1. Construct a divided difference table
def dividedDiffTable(x, y, n): 
	for i in range(1, n): 
		for j in range(n - i): 
			y[j][i] = ((y[j][i - 1] - y[j + 1][i - 1]) / (x[j] - x[i + j])); 
	return y; 

def printDiffTable(y, n): 
	for i in range(n): 
		for j in range(n - i): 
			print(round(y[i][j], 4), "\t", end = " "); 
		print(""); 
y=dividedDiffTable(x, y, n); 
print("1. Construct a divided difference table")
printDiffTable(y, n); 

# 2. Find the coefficients of Newton interpolation polynomial and plot the same as graph highlighting the given points also
print("\n2. Find the coefficients of Newton interpolation polynomial and plot the same as graph highlighting the given points also")
def getNDDCoeffs(x, y):
    n = np.shape(y)[0]
    pyramid = np.zeros([n, n])
    pyramid[::,0] = y 
    for j in range(1,n):
        for i in range(n-j):
            pyramid[i][j] = (pyramid[i+1][j-1] - pyramid[i][j-1]) / (x[i+j] - x[i])
    return pyramid[0]
coeff_vector = getNDDCoeffs(xx, yy)
print("Coefficients of Newton interpolation polynomial:", coeff_vector)
final_pol = np.polynomial.Polynomial([0.])
n = coeff_vector.shape[0] 
for i in range(n):
    p = np.polynomial.Polynomial([1.]) 
    for j in range(i):
        p_temp = np.polynomial.Polynomial([-xx[j], 1.]) 
        p = np.polymul(p, p_temp) 
    p *= coeff_vector[i] 
    final_pol = np.polyadd(final_pol, p) 

p = np.flip(final_pol[0].coef, axis=0)
print("Simplified coefficients of Newton interpolation polynomial:", p, "\nPlot with highlighted given points:")
# plot 
import matplotlib.pyplot as plt
x_axis = np.linspace(0, 10, num=5000)
y_axis = np.polyval(p, x_axis)

plt.plot(x_axis, y_axis)
plt.scatter(xx,yy)
plt.show()

# 3. Find the value of the function at X = 4.2
def proterm(i, value, x): 
	pro = 1; 
	for j in range(i): 
		pro = pro * (value - x[j]); 
	return pro; 

def applyFormula(value, x, y, n): 
	sum = y[0][0]; 
	for i in range(1, n): 
		sum = sum + (proterm(i, value, x) * y[0][i]); 
	return sum; 
print("\n3. Find the value of the function at X = 4.2")
value = 4.2; 
print("X at", value, "is", applyFormula(value, x, y, n))